#!/usr/bin/perl

use strict;
use warnings;

package MockUpLastFM;
use HTTP::Server::Simple::CGI;
use base qw{ HTTP::Server::Simple::CGI };

my %cnf = (
    mode => q{default},
    bg => 0
);

my %dispatch = (
    '/' => \&response_handshake,
    '/np' => \&response_nowplaying,
    '/submit' => \&response_submit
);

sub print_banner {
}

sub reply {
    my ($code, $body) = @_;
    my $bodytext = join("\n", @{ $body }) . "\n";
    my $bodylength = length $bodytext;

    if ($code == 200) {
        print "HTTP/1.1 200 OK\r\n";
    } elsif ($code == 404) {
        print "HTTP/1.1 404 Not found\r\n";
    } else {
        die "Unknown code: $code\n";
    }
    print "Content-Length: $bodylength\r\n";
    print "Content-Type: text/plain\r\n";
    print "\r\n";
    print $bodytext;
}

sub handle_request {
    my ($self, $cgi) = @_;

    my $path = $cgi->path_info();
    my $handler = $dispatch{$path};
    print STDERR "$path (" . $cnf{mode} . ")\n";

    if (ref $handler eq "CODE") {
        $handler->($cgi);

    } else {
        reply 404, [ "Not found" ];
    }
}

sub response_handshake {
    my ($cgi) = @_;
    if ($cnf{mode} eq q{badauth}) {
        reply 200, [ "BADAUTH" ];
    } elsif ($cnf{mode} eq q{badtime}) {
        reply 200, [ "BADTIME" ];
    } elsif ($cnf{mode} eq q{banned}) {
        reply 200, [ "BANNED" ];
    } elsif ($cnf{mode} eq q{failed}) {
        reply 200, [ "FAILED Go away!" ];
    } else {
        reply 200, [ "OK",
                     "cafebabe",
                     "http://localhost:8080/np",
                     "http://localhost:8080/submit" ];
    }
}

sub response_submit {
    my ($cgi) = @_;
    if ($cnf{mode} eq q{badsession}) {
        reply 200, [ "BADSESSION" ];
    } else {
        reply 200, [ "OK" ];
        foreach my $key ($cgi->param()) {
            print STDERR "$key: {", $cgi->param($key), "}\n";
        }
    }
}

sub response_nowplaying {
    response_submit(@_);
}

sub set {
    my ($self, $key, $val) = @_;
    $cnf{$key} = $val;
}

sub get {
    my ($self, $key) = @_;
    return $cnf{$key};
}

package main;

my $srv = MockUpLastFM->new(8080);

do {
    sub usage {
        print q{
 Usage: test-server [OPTION(s)]

  --help, -h             Display this help text.
  --background, -b       Put server into background.
  --mode, -m <MODE>      Supply a mode parameter to the server.

};

    }
    use Getopt::Long;
    my ($rc);

    Getopt::Long::Configure(
        'require_order', 'no_gnu_compat', 'auto_abbrev',
        'no_ignore_case', 'bundling');

    $rc = GetOptions (
        "help|h" =>
            sub { usage; exit 0 },
        "mode|m=s" =>
            sub { $srv->set('mode', $_[1]) },
        "background|b" =>
            sub { $srv->set('bg', 1) } );

    if (!$rc) {
        usage;
        exit 1;
    }
};

my $pid;

if ($srv->get('bg')) {
    $pid = $srv->background();
    print "$pid\n";
} else {
    $pid = $srv->run();
}
